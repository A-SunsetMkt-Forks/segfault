#! /bin/bash -r

# This is called by SSHD inside SF-HOST docker.
# - All environments have been cleared by SSHD.
# - Redirects not allowed in restricted shells.
#
# This script can be run from the source directory for testing.
# SF_BASEDIR must point to the source directory.
#    su - sf-user
#    export SF_BASEDIR=/home/sf-user/x/segfault-0.2.2a
#    cd /segfault/host/fs-root/bin
#    SF_DEBUG=1 SF_EMU=1 SF_SEED=foobar3 ./segfaultsh
#
# Load/restore environment variables from file
# `source' is prohibited in restricted bash shell (bash -r)
# use `eval' trick to load environemnt variables into a restricted shell
# SF_DEBUG can be set by ssh-client with -o SetEnv SF_DEBUG=1 or by
# docker compose '.env' file.
SSH_SF_DEBUG="${SF_DEBUG}" # Set by SSH client
[[ -f /dev/shm/env.txt ]] && eval "$(cat /dev/shm/env.txt)"
[[ -z $SF_DEBUG ]] && SF_DEBUG="${SSH_SF_DEBUG}"
unset SSH_SF_DEBUG

CY="\e[1;33m" # yellow
CDY="\e[0;33m" # yellow
CR="\e[1;31m" # red
CB="\e[1;34m" # blue
CC="\e[1;36m" # cyan
CG="\e[1;32m" # green
CDG="\e[0;32m" # green
CDC="\e[0;36m" # cyan
CDR="\e[0;31m" # red
CN="\e[0m"    # none
CW="\e[1;37m" # white
CF="\e[2m"    # faint
CUL="\e[4m"

ERREXIT()
{
	local code
	code="$1"
	[[ -z $code ]] && code=99

	shift 1
	[[ -n $1 ]] && echo -e >&2 "${CR}ERROR:${CN} $*"

	exit "$code"
}

if [[ -z $SF_DEBUG ]]; then
	DEBUGF(){ :;}
	SF_DOCKER_LOG="none"
else
	DEBUGF(){ echo -e 1>&2 "${CY}DEBUG:${CN} $*";}
	SF_DOCKER_LOG="local"
fi

argv2esc()
{
	local s
	local x
	local str

	for x in "$@"; do
		# Esacpe ' with '"'"'
		str="${x//\'/\'\"\'\"\'}"
		s+=" '$str'"
	done

	echo "$s"
}

# The current 'restricted shell' does not allow for stdout redirection to /dev/null.
# Thus execute in unrestricted shell with 'exec_devnull' and redirect stdout to /dev/null. 
exec_devnull()
{
	local argstr
	local bin

	bin="$1"
	shift 1

	argstr="$(argv2esc "$@")"
	if [[ -z $SF_DEBUG ]]; then
		bash -c "exec \"$bin\" $argstr 2>/dev/null >/dev/null"
	else
		# DEBUGF "EXEC \"$bin\" $argstr"
		# HERE: DEBUG is enabled. Show STDOUT/STDERR
		bash -c "exec \"$bin\" $argstr"
	fi
}

exec_errnull()
{
	local argstr
	local bin

	bin="$1"
	shift 1

	argstr="$(argv2esc "$@")"
	if [[ -z $SF_DEBUG ]]; then
		bash -c "exec \"$bin\" $argstr 2>/dev/null"
	else
		# HERE: DEBUG is enabled. Show STDOUT/STDERR
		bash -c "exec \"$bin\" $argstr"
	fi
}

# Overcoming a restricted shell. Write $1 to file in $2
# tofile "foobar \$HOME \"|';id;" world.txt
tofile()
{
	local str
	# Replace ' with '"'"'
	str="${1//\'/\'\"\'\"\'}"
	# [[ -n $SF_DEBUG ]] && ls -al $(dirname $2)
	bash -c "echo '$str' >'$2' 2>/dev/null" || ERREXIT 231 "tofile: Failed to create "$(basename "$2")""
}

# Set $1 to $2 if $1 is not already set.
emu_set_env()
{
	eval "[[ -n \"\$$1\" ]]" && return
	echo "[+] EMULATION: Setting $1=$2"
	eval "$1"=\"${2}\"
}

init_emu_tor()
{
	local fn
	fn="${SF_CFG_GUEST_DIR}/onion_hostname-$1"

	[[ -e "$fn" ]] && return

	local str
	str="${1}-EMULATIONxxxxxalsdjfkljasdflkasdlkfjaldsfadlsgiahfgljzhfkawhrkt"
	tofile "${str:0:56}.onion" "${fn}"
}


xmkdir()
{
	[[ -d "$1" ]] && return
	mkdir -p "$1"
}

# segfaultsh started directly from the command shell (for testing & development)
# SF_BASEDIR=/home/sf-user/segfault-src
# SF_EMU_PREFIX="${SF_BASEDIR}/emu"
# mkdir "$SF_EMU_PREFIX"
# SF_DEBUG=1 SF_SEED=foobar3 ./segfaultsh
init_emu()
{
	[[ -z $SF_EMU ]] && return

	SF_EMU_DIR="${SF_BASEDIR}/emu"
	SF_SEC_DIR="${SF_BASEDIR}/emu/sec/www-root"
	SF_CONFIG_DIR="${SF_BASEDIR}/emu/config"
	SF_INFO_DIR="${SF_BASEDIR}/config/etc/info"
	SF_HOST_FS_ROOT="${SF_BASEDIR}/host/fs-root"
	SF_WWW_ROOT_DIR="${SF_EMU_DIR}/encfs-sec/www-root"


	[[ ! -d $SF_EMU_DIR ]] && mkdir "${SF_EMU_DIR}"

	[[ ! -d "${SF_SEC_DIR}" ]] && mkdir -p "${SF_SEC_DIR}"
	[[ ! -f "${SF_SEC_DIR}/.IS-ENCRYPTED" ]] && touch "${SF_SEC_DIR}/.IS-ENCRYPTED"

	emu_set_env SF_DNS "1.1.1.1"
	emu_set_env SF_FQDN "EMULATION.segfault.net"
	emu_set_env SF_TOR "10.0.0.111"
	emu_set_env SF_USER "root"
	emu_set_env SSH_CONNECTION "1.2.3.4 31337 10.0.2.15 22"
	export SSH_CONNECTION

	# Overwrite defaults to run in EMULATOR
	SF_CFG_GUEST_DIR="${SF_EMU_DIR}/config-for-guest"
	SF_ENCFS_SEC_DIR="${SF_EMU_DIR}/encfs-sec"

	xmkdir "${SF_ENCFS_SEC_DIR}"
	xmkdir "${SF_CFG_GUEST_DIR}"
	xmkdir "${SF_ENCFS_SEC_DIR}/user-${LID}"
	xmkdir "${SF_ENCFS_SEC_DIR}/everyone-root"
	xmkdir "${SF_ENCFS_SEC_DIR}/everyone-root/everyone"
	xmkdir "${SF_ENCFS_SEC_DIR}/www-root/www/${SF_HOSTNAME,,}"

	[[ ! -f "${SF_CFG_GUEST_DIR}/id_ed25519" ]] && ssh-keygen -q -t ed25519 -C "" -N "" -f "${SF_CFG_GUEST_DIR}/id_ed25519"
	[[ -f "${SF_CFG_GUEST_DIR}/id_ed25519.pub" ]] && rm -f "${SF_CFG_GUEST_DIR}/id_ed25519.pub"

	init_emu_tor 22
	init_emu_tor 80

	exec_devnull docker network create -d bridge sf-guest
}

init_defaults()
{
	[[ -z $SF_BASEDIR ]] && ERREXIT 1 "SF_BASEDIR= not set"
	SF_SEC_DIR="/sec/www-root"
	SF_WWW_ROOT_DIR="/sec/www-root"
	SF_CONFIG_DIR="/config"
	SF_INFO_DIR="/config/etc/info"
	SF_CFG_GUEST_DIR="${SF_SHMDIR}/config-for-guest" # Mounted to /config/guest
	SF_ENCFS_SEC_DIR="${SF_SHMDIR}/encfs-sec"
}

init_vars()
{
	init_defaults
	init_emu

	NOW="$(date +%s)"
	YOURIP="${SSH_CONNECTION%%[[:space:]]*}"
	[[ -z $YOURIP ]] && ERREXIT 255 "SSH_CONNECTION= is is not set. segfaultsh not started via sshd?"
	# Do not store IP addresses. Hash it with a secret (SEED) instead.
	local str
	str="$(echo "IP-${YOURIP}-${SF_SEED}" | sha512sum)"
	YOURIP_HASH="${str:0:16}"
	[[ -z $YOURIP_HASH ]] && ERREXIT 2 "YOURIP_HASH= not set"

	[[ -z $SF_FQDN ]] && SF_FQDN="this"
	DB_DIR="${SF_CONFIG_DIR}/db"
	SF_USER_DB_DIR="${SF_CONFIG_DIR}/db/db-${LID}"
}


# Called when a new server is created.
print_disclaimer()
{
	echo 1>&2 -e "\
${CR}######################################################################
#### ${CY}DISCLAIMER: TO BE USED FOR CREATIVE AND GOOD PURPOSES ONLY..${CR} ####
#### ${CY}USE AT YOUR OWN RISK.     ---> DON'T FUCK UP <---            ${CR}####
######################################################################${CN}"
}

print_ssh_access()
{
	echo 1>&2 -e "\
:Cut & Paste these lines to your workstation's shell to retain access:
######################################################################
${CDC}cat >~/.ssh/id_sf-${SF_HOSTNAME,,} ${CDR}<<__EOF__
${CN}${CF}$(cat "${SF_CONFIG_DIR}/guest/id_ed25519")
${CDR}__EOF__
${CDC}cat >>~/.ssh/config ${CDR}<<${CDR}__EOF__
${CN}${CF}host ${SF_HOSTNAME,,}
    HostName ${SF_FQDN}
    IdentityFile ~/.ssh/id_sf-${SF_HOSTNAME,,}
    SetEnv SECRET=${SF_SEC}
${CDR}__EOF__
${CDC}chmod 600 ~/.ssh/config ~/.ssh/id_sf-${SF_HOSTNAME,,}${CN}
######################################################################
Thereafter use these commands:
--> ${CDC}ssh root@${SF_HOSTNAME,,}${CN}
--> ${CDC}scp root@${SF_HOSTNAME,,}:stuff.tar.gz ~/Downloads${CN}
--> ${CDC}sftp root@${SF_HOSTNAME,,}${CN}
--> ${CDC}sshfs -o reconnect root@${SF_HOSTNAME,,}:/sec ~/sec ${CN}
----------------------------------------------------------------------"
}

# Output GOODBYE message with infos how to connect back to this shell
print_goodbye()
{
	[[ -z $IS_PTY ]] && return

	# Restricted shell (-r) wont let us redirect stderr - use a bash-exec trick
	n="$(bash -c "docker exec \"lg-${LID}\" pgrep . 2>/dev/null|wc -l")"
	DEBUGF "Processes running: $n"
	if [[ "$n" -gt 3 ]]; then
		# Display the running processes
		exec_errnull docker exec "lg-${LID}" pgrep -v '^\[SF' -al | tail -n+3
		echo -e "\
${CY}WARNING: Another shell or background process is still running.${CN}
-------> The encrypted filesystem in /sec will remain accessible until
-------> the last shell exits or all background processes terminate.
-------> Type ${CC}halt${CN} instead to stop the server. This will
-------> also make /sec unavailabe until the next login."
	fi
	[[ -z $SF_IS_PAYING ]] && {
		echo -e "\
\r${CDY}@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@          ${CY}={{{ This Session was provided for ${CG}FREE${CY} }}}=${CDY}         @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@   ${CDG}** GET MORE MEMORY, SPEED, STORAGE AND NO RESTRICTIONS **${CDY}   @@@
@@@          ${CB}${CUL}https://www.thc.org/segfault/buy-an-upgrade${CN}${CDY}          @@@
@@@           ${CDR}${CUL}https://www.thc.org/segfault/youcheapfuck${CN}${CDY}           @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@${CN}"

	}
	echo -e "\
Access with      : ${CDC}ssh -o \"SetEnv SECRET=${SF_SEC:-UNKNOWN}\" ${SF_USER}@${SF_FQDN:-UNKNOWN}${CN}
GOODBYE          : ${CW}Join us on Telegram - https://t.me/thcorg${CN}"
}

print_to_many_servers()
{
	echo >&2 -e "\
[${CR}ERROR${CN}]
--> ${CDY}You ($YOURIP) have to many servers running${CN}
--> Read ${CB}${CUL}https://www.thc.org/segfault/youcheapfuck${CN}
--> Contact us on Telegram: ${CW}https://t.me/thcorg${CN}"
}

echo_pty()
{
	[[ -n $IS_PTY ]] || return
	echo "$@"
}

spawn_shell_exit()
{
	# $@ is either ("-c", "<command>") or empty
	DEBUGF "ARG(${#})=$*"
	# [[ ${#} -ne 0 ]] && [[ ${#} -ne 2 ]] && ERREXIT 127 "BAD ($*)"

	docker-exec-sigproxy exec "$ARG" "lg-${LID}" nice -n"${SF_USER_NICE_SCORE:?}" zsh "${PARAM[@]}"
	ret="$?" # save return value and exit this script later with same return value.
	print_goodbye

	exit "$ret"
}

# Generate a mnemonic hostname from LID (e.g. ButterflyCat)
mk_hostname()
{
	NUM=$(echo "ibase=16; $(echo "$LID" | md5sum | cut -f1 -d" " | tr 'a-z' A-Z)" | bc)
	readarray -t english <"${SF_HOST_FS_ROOT}/etc/english.txt"
	SF_HOSTNAME="UnknownUnknown"
	if [[ "${#english[@]}" -eq 2048 ]]; then
		SF_HOSTNAME="${english[$((NUM % 2048))]}"
		SF_HOSTNAME+="${english[$(( (NUM / 2048) % 2048 ))]}"
	fi
	DEBUGF "SF_HOSTNAME=$SF_HOSTNAME"
	unset NUM
	unset english
}

setup_fs_limit()
{
	# Return if no limit is set
	[[ -z $SF_USER_ROOT_FS_LIMIT ]] && return 0 # True

	# Backing FS must be of type XFS
	[[ "$(docker info --format '{{json .DriverStatus}}' | jq -r '.[0][1]')" != "xfs" ]] && ERREXIT 1 "Backing FS is not XFS but SF_USER_ROOT_FS_LIMIT is set"

	# Backing FS is of type XFS.
	# Let's try if we can mount it with restrictions:
	# docker run -it --storage-opt size=12m sf-gsnc true || return

	DOCKER_ARGS+=("--storage-opt")
	DOCKER_ARGS+=("size=${SF_USER_ROOT_FS_LIMIT:?}")
}

load_limits()
{
	# Set the default values.
	# No default for ROOT_FS limit. Should be set in sf.conf or if not set
	# then there is NO LIMIT.
	#SF_USER_ROOT_FS_LIMIT=2GB
	SF_USER_MEMORY_LIMIT=256MB
	SF_USER_PIDS_LIMIT=32
	SF_USER_CPU_SHARE=2
	SF_USER_OOM_SCORE=1000
	SF_USER_NICE_SCORE=19
	SF_LIMIT_SERVER_BY_IP=8

	# HACK: Use eval-trick to 'source' in a restricted bash shell
	[[ -f "${SF_INFO_DIR}/sf.conf" ]] && eval "$(cat "${SF_INFO_DIR}/sf.conf")"

	# Then souce user specific limits
	[[ -f "${SF_USER_DB_DIR}/limits.conf" ]] && eval "$(cat "${SF_USER_DB_DIR}/limits.conf")"

	# DEBUGF "SF_USER_MEMORY_LIMIT=${SF_USER_MEMORY_LIMIT}"
	# DEBUGF "SF_USER_PIDS_LIMIT=${SF_USER_PIDS_LIMIT}"
	# DEBUGF "SF_USER_CPU_SHARE=${SF_USER_CPU_SHARE}"
	# DEBUGF "SF_USER_OOM_SCORE=${SF_USER_OOM_SCORE}"
	# DEBUGF "SF_USER_ROOT_FS_LIMIT=${SF_USER_ROOT_FS_LIMIT:-NO LIMIT}"

	DOCKER_ARGS+=("--memory=${SF_USER_MEMORY_LIMIT}")
	# Setting memory-swap and memory to same value will disable swapping
	DOCKER_ARGS+=("--memory-swap=${SF_USER_MEMORY_LIMIT}")
	DOCKER_ARGS+=("--pids-limit=${SF_USER_PIDS_LIMIT}")
	DOCKER_ARGS+=("--cpu-shares=${SF_USER_CPU_SHARE}")
	DOCKER_ARGS+=("--oom-score-adj=${SF_USER_OOM_SCORE}")

	setup_fs_limit || ERREXIT 202 "Can't configure XFS limit"
}

# wait_for_conn_limit <ID> <ts_window>
# Allow a max of 5 new connections within <ts_window>.
# Give up after 120 seconds.
#   ID - is either "all" for system wide limit or YOURIP_HASH for per IP limit
wait_for_conn_limit()
{
	local ts_window
	local id
	local n
	local fn

	id="$1"
	ts_window="$2"
	fn="/dev/shm/conn-${id}.conf"
	# Do not allow more than 5 new connections in 30 seconds.
	ARR=(0 0 0 0 0)
	[[ -f "${fn}" ]] && {
		NOW="$(date +%s)"
		local ts_good
		local c
		c=0
		while :; do
			eval "$(grep ^ARR "${fn}")"

			ts_good=$((NOW - ts_window))
			[[ ${ARR[0]} -lt $ts_good ]] && break

			[[ $c -gt 60 ]] && echo -e >&2 "giving up. Try again later." && exit 255
			[[ $c -eq 0 ]] && echo -en >&2 "[${CY}SF${CN}] Waiting for resources..."
			echo -n "."
			sleep 2
			((c++))
			((NOW+=2))
		done
		[[ $c -gt 0 ]] && echo -e >&2 "[${CG}OK${CN}]"
	}
	tofile "ARR=(${ARR[*]:1:4} $NOW)" "${fn}"
}

wait_for_resources()
{
	# 5 Connections within 60 seconds from the same IP.
	wait_for_conn_limit "${YOURIP_HASH}" "60" 
	# 5 Connections within 15 seconds all in all
	wait_for_conn_limit "all" "15"
}

# Check if max servers per IP are in use.
check_limit_server_by_ip()
{
	local fn
	local arr_new

	[[ -z $SF_LIMIT_SERVER_BY_IP ]] && return
	[[ -n $SF_IS_PAYING ]] && return

	[[ -n $IS_TRY_EXISTING ]] && {
		# SECRET= was supplied.
		# If it's running then allow to connect to existing (it's not a new server).
		exec_devnull docker container inspect "lg-${LID}" -f '{{.State.Status}}' && return
	}

	fn="/dev/shm/ip-${YOURIP_HASH}.conf"

	[[ -f "$fn" ]] && {
		eval "$(grep ^ARR "$fn")"

		local n
		local lid
		n=0
		for lid in "${ARR[@]}"; do
			[[ -z $lid ]] && break
			### Check if anyone of the shells is still alive
			exec_devnull docker container inspect "lg-${lid}" -f '{{.State.Status}}' || continue
			((n++))
			arr_new+=($lid)
		done

		## Eyy, good idea to check if they are idle?
		[[ "$n" -ge "${SF_LIMIT_SERVER_BY_IP}" ]] && {
			print_to_many_servers

			ERREXIT 255
		}
	}

	tofile "ARR=(${arr_new[*]} $LID)" "$fn"
}

# Find out if SSHD spawns a shell or a command.
# and if SSHD insists on a TTY (ssh -t <user@host> <command>)
# - Execute `tty' in unrestricted shell (one day a clever hacker will exploit this)
if bash -c "tty >/dev/null"; then
	ARG="-it"
else
	ARG="-i"
fi

if [[ ${#} -eq 2 ]]; then
	# HERE: command via "-c" "cmd"
	PARAM=("-c" "${2}");
elif [[ ${#} -eq 0 ]]; then
	# - Set docker arguments to login-shell or profile wont get read.
	PARAM=("-il")
	# For -c "cmd" we silence output but for login shells we show
	IS_PTY=1
else
	ERREXIT 255 "BAD PARAMS: '${*}'"
fi

### ----BEGIN SANTIZE----
# SECRET and SF_DEBUG are user supplied.
# Connect to existing session
if [[ -n $SECRET ]] && [[ ${#SECRET} -eq 24 ]] && [[ ! "${SECRET}" =~  [^a-zA-Z0-9] ]]; then
	IS_TRY_EXISTING=1
	SF_SEC="${SECRET}"
else
	SF_SEC="$(head -c 1024 /dev/urandom | tr -dc '[:alpha:]' | head -c 24)"
fi

[[ -n $SF_DEBUG ]] && SF_DEBUG=1
### ----END SANITIZE----

LID=$(echo -n "LID ${SF_SEC}" | sha512sum | base64 | tr -dc '[:alpha:]' | head -c 10)

[[ -z $SF_SEED ]] && ERREXIT 244 "SF_SEED= is not set."
MARKFILE="THIS-DIRECTORY-IS-NOT-ENCRYPTED--DO-NOT-USE.txt"

# Call init_vars() after LID is set
init_vars
# Load CPU/PID/OOM limits (systemwide or user specific)
load_limits
# Keep guest waiting until there are sufficient resources
wait_for_resources

### Check if the limit has been reached for this user
check_limit_server_by_ip

# Check if share got unmounted (e.g. EncFS died)
[[ ! -f "${SF_SEC_DIR}/.IS-ENCRYPTED" ]] && ERREXIT 243 "System not ready yet (wrong EncFS password. Please inform the admin to set correct SF_SEED)"

mk_hostname

HNLID_DIR="${SF_CONFIG_DIR}/db/hn/"
HNLID_FILE="${HNLID_DIR}/hn2lid-${SF_HOSTNAME}"
# Execute under "root" (uid=1001) context:
[[ ! -d "${HNLID_DIR}" ]] && { mkdir -p "${HNLID_DIR}" || ERREXIT; }


if [[ -d "${SF_USER_DB_DIR}" ]]; then
	S="Your Server       : ${CDY}${SF_HOSTNAME:0:34}${CN}....................................................."
	echo_pty -en "${S:0:65}"
	touch "${HNLID_FILE}"
else
	print_disclaimer
	# #####################################################################
	# Got 54 space
	# Creating Server => 16 chars
	# Color escape codes => 11 chars
	# Hostname max = 54 - 16
	# Final echo: 54 + 11
	S="Creating Server ${CDY}${SF_HOSTNAME:0:38}${CN}..................................................."
	echo_pty -en "${S:0:65}"

	# A hostname is generated from the LID. Avoid collision when a hostname
	# has already been created for a different LID.
	[[ -e "${HNLID_FILE}" ]] && {
		lid_old=$(cat "${HNLID_FILE}")
		[[ "$lid_old" -ne "$LID" ]] && {
			DEBUGF "$SF_HOSTNAME already used by ${lid_old} (this is ${LID})."
			ERREXIT 13 "Hostname Collision. Try again.."
		}
		unset lid_old
	}
	IS_NEW_SERVER=1

	mkdir -p "${DB_DIR}/db-${LID}" || ERREXIT
	touch "${DB_DIR}/db-${LID}/created.txt" || ERREXIT
	[[ -d "${HNLID_DIR}" ]] || exec_devnull mkdir "${HNLID_DIR}"
	tofile "$LID" "${HNLID_FILE}"
fi

DEBUGF "LID=${LID} SF_HOSTNAME=${SF_HOSTNAME}"

if [[ "$(exec_errnull docker container inspect "encfs-${LID}" -f '{{.State.Status}}')" != "running" ]]; then
	LENCFS_PASS=$(echo -n "EncFS-PASS-${SF_SEED}${SF_SEC}" | sha512sum | base64 | tr -dc '[:alpha:]' | head -c 24)
	[[ -z $LENCFS_PASS ]] && ERREXIT 241 "Failed to create session password"
	# HERE: encfs is not already running for this instance...
	DEBUGF "EncFS-${LID} is not yet running..."
	# DEBUGF "Using 'EncFS-PASS-${SF_SEED:0:2}...${SF_SEC} => ${LENCFS_PASS}"

	# EncFS	to mount encrypted to mount-point.
	# Run in background (-d)
	# Use exec_devnull to redirect Container-ID to /dev/null (docker run -d).
	exec_devnull docker run \
		--oom-score-adj=500 \
		--rm \
		--name "encfs-${LID}" \
		--cap-add SYS_ADMIN \
		--device /dev/fuse \
		--security-opt apparmor:unconfined \
		--env LENCFS_PASS="${LENCFS_PASS}" \
		--env LID="${LID}" \
		--env SF_DEBUG="${SF_DEBUG}" \
		--log-driver "${SF_DOCKER_LOG}" \
		-v "${SF_BASEDIR}/data/user:/encfs/raw" \
		-v "${SF_ENCFS_SEC_DIR}/user-${LID}:/encfs/sec:shared" \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		-d \
		sf-encfs || ERREXIT 251 "Could not create /sec..."
fi
echo_pty -n ".."

# Wait until sf-encf has mounted the secure drive...or otherwise this
# will show an insecure directory:
#    ssh user@segfault.thc.org "ls -al /sec"
# This will loop until the MARKFILE is gone (e.g. encfs mounted a directory over it)
# NOTE: It would be quicker to have /encfs/sec available in this sf-host instance
#       but this may also pose a security risk: A vulnerability in SSHD would
#       expose all encrypted drives. Doing it with 'docker run' means that
#       the hacker would to to break docker - which is easy enough given that the
#       docker-socket is available in this context but still a step harder.

DEBUGF "Waiting until /sec becomes available..."
docker exec \
	"encfs-${LID}" \
	/bin/sh -c \
	"LID=\"${LID}\" \
	SF_DEBUG=\"${SF_DEBUG}\" \
	MARKFILE=\"${MARKFILE}\" \
	/mount.sh" || ERREXIT 244 "Failed to set up /sec..."

echo_pty -n ".."


# Attach to instance if already running
[[ -n $IS_TRY_EXISTING ]] && {
	DEBUGF "Attaching to existing instance lg-${LID}..."
	exec_devnull docker container inspect "lg-${LID}" -f '{{.State.Status}}' && { 
		echo_pty -e "..........[${CG}Ok${CN}]"
		spawn_shell_exit
		# NOT REACHED
	}
	echo_pty -n ".."

	DEBUGF "FAILED to attached to lg-${LID}"
	# HERE: Instance does not exists.
}

### Create ONION directory:
# This script runs under UID=1000 (root) and does not have write permission to
# /onion. Thus jump via docker.
[[ ! -d "${SF_WWW_ROOT_DIR}" ]] && { 
	DEBUGF "Creating /onion/${SF_HOSTNAME,,}"
	if [[ -z $SF_EMU ]]; then
		exec_devnull docker exec "sf-host${SF_HOST_CONTAINER_NAME_SUFFIX}" mkdir "${SF_WWW_ROOT_DIR}/${SF_HOSTNAME,,}"
	else
		mkdir "${SF_WWW_ROOT_DIR}/${SF_HOSTNAME,,}" || ERREXIT
	fi
}

# Starting GUEST shell
# Challenge: Keep user processes running that got spawned in the background
# even when first instance terminates. Also do not terminate instance
# when there are still shells using it ('docker exec').
# Solution: Spawn a docker in the background that monitors the number of
# processes and use 'docker exec' for every connection.


### Start the care taker...
exec_devnull docker run \
	--hostname "sf-${SF_HOSTNAME}" \
	"${DOCKER_ARGS[@]}" \
	--rm \
	--init \
	--name "lg-${LID}" \
	--init \
	--cap-drop=MKNOD \
	--net sf-guest \
	--dns "${SF_DNS:-BAD}" \
	--env SF_SEC="${SF_SEC}" \
	--env SF_TOR="${SF_TOR}" \
	--env SF_VER="${SF_VER}" \
	--env SF_USER="${SF_USER}" \
	--env SF_FQDN="${SF_FQDN}" \
	--env SF_DEBUG="${SF_DEBUG}" \
	--env SF_HOSTNAME="${SF_HOSTNAME}" \
	--env SF_LID="${LID}" \
	--env SF_IS_LOGINSHELL=1 \
	--env SF_IS_GOLD_PROMPT="${SF_IS_GOLD_PROMPT}" \
	-e SSH_CONNECTION \
	--log-driver "${SF_DOCKER_LOG}" \
	-v "${SF_CFG_GUEST_DIR:?}/:/config/guest:ro" \
	-v "${SF_ENCFS_SEC_DIR}/user-${LID}:/sec:slave" \
	-v "${SF_ENCFS_SEC_DIR}/everyone-root/everyone:/everyone:slave" \
	-v "${SF_ENCFS_SEC_DIR}/www-root/www/${SF_HOSTNAME,,}:/onion:slave" \
	-v "${SF_BASEDIR}/config/etc/info/WARNING---SHARED-BETWEEN-ALL-SERVERS---README.txt:/everyone/WARNING---SHARED-BETWEEN-ALL-SERVERS---README.txt:ro" \
	-d \
	"sf-guest${SF_GUEST_CONTAINER_NAME_SUFFIX}" /sf/bin/sf-destructor.sh || ERREXIT 251 "Failed to set up guest instance..."

echo_pty -n ".."

DEBUGF "Instance started..."

# Wait for detached docker shell to become available...
n=0
while :; do
	str="$(exec_errnull docker container inspect "lg-${LID}" -f '{{.State.Status}}')"
	rc="$?"
	DEBUGF "rc=$rc status=$str"
	[[ "$rc" -eq 0 ]] && [[ "$str" = "running" ]] && break
	DEBUGF "#${n} Waiting for sf-guest to be ready..."
	if [[ $n -gt 0 ]]; then sleep 5; else sleep 0.1; fi
	n=$((n+1))
	[[ $n -gt 2 ]] && ERREXIT 253 "Could not create instance..."
done
echo_pty -n ".."

# Setup instance
docker exec "lg-${LID}" /sf/bin/sf-setup.sh || ERREXIT 252 "Failed to set up guest instance..."

echo_pty -e "......[${CG}OK${CN}]"

# Output help of how to connect elegantly
[[ -n $IS_NEW_SERVER ]] && print_ssh_access

DEBUGF "Status: $(docker container inspect "lg-${LID}" -f '{{.State.Status}}')"
# Spawn shell
spawn_shell_exit
# NOT REACHED

