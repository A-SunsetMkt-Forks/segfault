
# Sources as the last entry from ~/.zshrc or ~/.bashrc
CY="\e[1;33m" # yellow
CDY="\e[0;33m" # yellow
CR="\e[1;31m" # red
CB="\e[1;34m" # blue
CDB="\e[0;34m" # blue
CC="\e[1;36m" # cyan
CG="\e[1;32m" # green
CDG="\e[0;32m" # green
CDC="\e[0;36m" # cyan
CDR="\e[0;31m" # red
CN="\e[0m"    # none
CW="\e[1;37m" # white
CF="\e[2m"    # faint
CUL="\e[4m"

alias l='ls -Alh'
alias lt='ls -Alhrt'
alias xterm='xterm -bg black -fg gray'

[[ -e /usr/bin/nvim ]] && {
	alias vi='nvim'
	alias vim='nvim'
}

tty -s && [[ -n $TERM ]] && [[ "$TERM" != dumb ]] && {
	_grccmd()
	{
		local cmd
		cmd=$1
		shift 1
		[[ ! -t 1 ]] && { command "$cmd" "$@"; return; }

		command "$cmd" "$@" | /usr/bin/python3 /usr/bin/grcat "conf.${cmd##*/}"
		[[ -n ${PIPESTATUS[0]} ]] && return ${PIPESTATUS[0]}
		return ${pipestatus[1]}
	}

	_grcset()
	{
		local c
		c=$1

		unalias "$c" 2>/dev/null

		# Execution is faster if we assign a shell function
		[[ -e "/usr/share/grc/conf.${c##*/}" ]] && {
			eval "function ${c} { _grccmd \"$c\" \"\$@\"; }"
			# ZSH only: "$c"() { _grccmd "$0" "$@"; }
			return
		}

		# Fallback to slower (calls grc which calls grcat)
		alias $c="/usr/bin/grc --colour=auto $c"
	}

	# Be gay and color it all. #OneLove
	[[ -e /usr/bin/grc ]] && {
		cmds+=(./configure curl df dig du env findmnt free id ifconfig)
		cmds+=(lsattr lsblk lsof lspci make mount netstat nmap ntpdate)
		cmds+=(ping ps pv ss sockstat stat sysctl traceroute traceroute6 uptime vmstat wdiff whois)
		for c in "${cmds[@]}"; do
			_grcset "$c"
		done
		unset cmds

		# Currently broken:
		# - mtr (no output) 

		# These need stdout buffer disabled:
		cmds+=(tcpdump)
		for c in "${cmds[@]}"; do
			alias $c="/usr/bin/stdbuf -o0 /usr/bin/grc --colour=auto $c"
		done
		unset cmds

	}
	unset -f _grcset

	[[ -e /usr/bin/lsd ]] && {
		alias ls='lsd --icon never'
	}

	[[ -e /usr/bin/bat ]] && {
		less() {
			[[ ! -t 1 ]] && { command less "$@"; return; }
			# Only if output goes to PTY
			LESS=" -R " LESSOPEN="| /usr/bin/bat --color always --style=plain %s" command less "$@"
		}

		# eg. cat -An /etc/shellrc | hl sh
		hl() { /usr/bin/bat --color always -pp -l "$@"; }

		alias hi=hl
		alias syntax=hl

		_hicmd() {
			local cmd
			local ex
			cmd=$1
			shift 1

			# If any Opts are given then use orignal command.
			for o in "$@"; do
				[[ ${o} == "--" ]] && continue
				[[ ${o:0:1} == "-" ]] && { command "$cmd" "$@"; return; }
			done

			[[ ! -t 1 || ${#} -le 0 ]] && { command "$cmd" "$@"; return; }
			for source in "$@"; do
				[[ "$source" == "--" ]] && continue
    			case $source in
        			# *ChangeLog|*changelog)
	        		# 	command "$cmd" -- "$source" | source-highlight --failsafe -f esc --lang-def=changelog.lang --style-file=esc.style ;;
			        *Makefile|*makefile)
				        command "$cmd" -- "$source" | bat -pp -l Makefile ;;
			        *.bashrc|*.zshrc|*.profile|*.bash_profile|*rc.local|*.shellrc)
				        command "$cmd" -- "$source" | bat -pp -l bash ;;
			        *)
						ex="${source##*.}"
						[[ -z $ex || $ex == $source ]] && { command "$cmd" "$@"; return; }
						# Check if extension exists...
						bat -pp -l "$ex" </dev/null 2>/dev/null || { command "$cmd" "$@"; return; }
						command "$cmd" -- "$source" | bat -pp -l "$ex" ;;
			    esac
			done
		}
		alias cat="/usr/bin/bat -pp"
		tail() { _hicmd tail "$@"; }
		head() { _hicmd head "$@"; }
	}
}

[[ -f /usr/bin/zoxide ]] && {
	eval "$(zoxide init $(basename $SHELL))"
	alias cd='z'
}

[[ -f /usr/bin/fdfind ]] && alias fd=fdfind

[[ -z $LANG ]] && export LANG=en_US.UTF-8

[[ -e /sec/THIS-DIRECTORY-IS-NOT-ENCRYPTED--DO-NOT-USE.txt ]] && { echo >&2 "WARNING: /sec is NOT encrypted. PRESS ENTER to continue..."; read; }

[[ -n $SF_IS_GOLD_PROMPT ]] && [[ -n $PROMPT ]] && {
	prompt_symbol=ðŸ’›
	PROMPT= PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%F{%(#.yellow.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\n%{%Gâ””%}%{%Gâ”€%}%B%(#.%F{yellow}#.%F{blue}$)%b%F{reset} '
}

PATH="/sf/bin:$PATH"
[[ -d /sec/usr/bin ]] && PATH="/sec/usr/bin:$PATH"
[[ -d /sec/usr/sbin ]] && PATH="/sec/usr/sbin:$PATH"

_sf_info_non_perm()
{
	# On success show this...
	echo -e "${CDB}[${CDY}SF${CDB}] ${CR}Your changes will be lost."
	echo -e "${CDB}[${CDY}SF${CDB}] ${CB}${CUL}https://www.thc.org/segfault/faq/#lost${CN}"
}

apt()
{
	/usr/bin/apt "$@"

	# Show a warning on success on quota-error or package not found.
	# (All errors set $? to 100 and can not be distinguished)
	_sf_info_non_perm
}

apt-get()
{
	/usr/bin/apt-get "$@"

	_sf_info_non_perm
}

