
# Sources as the last entry from ~/.zshrc or ~/.bashrc
CY="\e[1;33m" # yellow
CDY="\e[0;33m" # yellow
CR="\e[1;31m" # red
CB="\e[1;34m" # blue
CDB="\e[0;34m" # blue
CC="\e[1;36m" # cyan
CG="\e[1;32m" # green
CDG="\e[0;32m" # green
CDC="\e[0;36m" # cyan
CDR="\e[0;31m" # red
CN="\e[0m"    # none
CW="\e[1;37m" # white
CF="\e[2m"    # faint
CUL="\e[4m"

alias l='ls -Alh'
alias lt='ls -Alhrt'

[[ -e /usr/bin/nvim ]] && {
	alias vi='nvim'
	alias vim='nvim'
}

tty -s && [[ -n $TERM ]] && [[ "$TERM" != dumb ]] && {
	# Be gay and color it all. #OneLove
	[[ -e /usr/bin/grc ]] && {
		cmds+=(configure curl df dig du env findmnt free id ifconfig)
		cmds+=(lsattr lsblk lsof make mount mtr netstat nmap ntpdate)
		cmds+=(ping ps pv ss stat sysctl traceroute uptime vmstat wdiff whois)
		for c in "${cmds[@]}"; do
			alias $c="/usr/bin/grc --colour=auto $c"
		done
		unset cmds

		# These need stdout buffer disabled:
		cmds+=(tcpdump)
		for c in "${cmds[@]}"; do
			alias $c="/usr/bin/stdbuf -o0 /usr/bin/grc --colour=auto $c"
		done
		unset cmds
	}

	[[ -e /usr/bin/lsd ]] && {
		alias ls='lsd --icon never'
	}

	[[ -e /usr/share/source-highlight/src-hilite-lesspipe.sh ]] && {
		less() {
			[[ ! -t 1 ]] && { command less "$@"; return; }
			# Only if output goes to PTY
			LESS=' -R ' LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s" command less "$@"
		}

		# eg. cat -An /etc/shellrc | hl sh
		hl() {
			local show_usage
			local lang
			if [[ $SHELL == *"zsh" ]]; then
				lang=${1:l}
			elif [[ $SHELL == *"bash" ]]; then
				lang="${1,,}"
			else
				lang="$(echo "$1" |  tr '[:upper:]' '[:lower:]')"
			fi

			case $lang in
				bash|ash|zsh|csh|ksh|shell) lang="sh" ;;
				py) lang="python" ;;
				make|mk) lang="makefile" ;;
				pl) lang="perl" ;;
				j) lang="json" ;;
				config|cnf) lang="conf" ;;
				cc|cxx) lang="cpp" ;;
				rb) lang="ruby" ;;
			esac

			# [[ ! -e "/usr/share/source-highlight/${lang}.lang" ]] && {
			# 	show_usage=1
			# 	echo >&2 -e "${CDR}Not found: ${CDY}/usr/share/source-highlight/${CY}${lang}${CDY}.lang${CN}"
			# }

			[[ ${#} -le 0 || -n "$show_usage" ]] && {
				echo >&2 -e "First parameter must be one of:\n\
   c           cpp         ruby        rust      css\n\
   go          php         python      asm       ini\n\
   conf        diff        html        java      spec\n\
   json        lua         makefile    perl      ldap\n\
   sh          xml         log         sql\n\
Example: ${CDC}cat -An /etc/shellrc | hl sh${CN}"
				return
			}
			# [[ ! -f "/usr/share/source-highlight/${lang}.lang" ]] && { command cat; return }
			source-highlight --failsafe -f esc --style-file=esc.style --src-lang="${lang}"
		}
		alias hi=hl
		alias syntax=hl

		_hicmd() {
			local cmd
			cmd=$1
			shift 1
			[[ ! -t 1 || ${#} -le 0 || ${1:0:1} == "-" ]] && { command "$cmd" "$@"; return; }
			for source in "$@"; do
				[[ "$source" == "--" ]] && continue
				# Produce the correct error code by the real app
				[[ ! -e "$source" ]] && { command "$cmd" -- "$source"; return; }
    			case $source in
        			*ChangeLog|*changelog)
	        			command "$cmd" -- "$source" | source-highlight --failsafe -f esc --lang-def=changelog.lang --style-file=esc.style ;;
			        *Makefile|*makefile)
				        command "$cmd" -- "$source" | source-highlight --failsafe -f esc --lang-def=makefile.lang --style-file=esc.style ;;
			        *.bashrc|*.zshrc|*.profile|*.bash_profile|*rc.local|*.shellrc)
				        command "$cmd" -- "$source" | source-highlight --failsafe -f esc --lang-def=sh.lang --style-file=esc.style ;;
			        *)
						command "$cmd" -- "$source" | source-highlight --failsafe -f esc --src-lang="${source##*.}" --style-file=esc.style ;;
			    esac
			done
		}
		cat() { _hicmd cat "$@"; }
		tail() { _hicmd tail "$@"; }
		head() { _hicmd head "$@"; }
	}
}

[[ -f /usr/bin/zoxide ]] && {
	eval "$(zoxide init $(basename $SHELL))"
	alias cd='z'
}

[[ -f /usr/bin/fdfind ]] && alias fd=fdfind

[[ -z $LANG ]] && export LANG=en_US.UTF-8

[[ -e /sec/THIS-DIRECTORY-IS-NOT-ENCRYPTED--DO-NOT-USE.txt ]] && { echo >&2 "WARNING: /sec is NOT encrypted. PRESS ENTER to continue..."; read; }

[[ -n $SF_IS_GOLD_PROMPT ]] && [[ -n $PROMPT ]] && {
	prompt_symbol=ðŸ’›
	PROMPT= PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%F{%(#.yellow.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\n%{%Gâ””%}%{%Gâ”€%}%B%(#.%F{yellow}#.%F{blue}$)%b%F{reset} '
}

_sf_info_non_perm()
{
	# On success show this...
	echo -e "${CDB}[${CDY}SF${CDB}] ${CR}Your changes will be lost."
	echo -e "${CDB}[${CDY}SF${CDB}] ${CB}${CUL}https://www.thc.org/segfault/faq/#lost${CN}"
}

apt()
{
	/usr/bin/apt "$@"

	# Show a warning on success on quota-error or package not found.
	# (All errors set $? to 100 and can not be distinguished)
	_sf_info_non_perm
}

apt-get()
{
	/usr/bin/apt-get "$@"

	_sf_info_non_perm
}

